{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "3d2f8aae-580f-4277-af9b-65df8956b8c8",
   "metadata": {},
   "outputs": [
    {
     "ename": "ModuleNotFoundError",
     "evalue": "No module named 'streamlit'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[1], line 1\u001b[0m\n\u001b[1;32m----> 1\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mstreamlit\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m \u001b[38;5;21;01mst\u001b[39;00m\n\u001b[0;32m      2\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mpandas\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m \u001b[38;5;21;01mpd\u001b[39;00m\n\u001b[0;32m      3\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mmatplotlib\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mpyplot\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m \u001b[38;5;21;01mplt\u001b[39;00m\n",
      "\u001b[1;31mModuleNotFoundError\u001b[0m: No module named 'streamlit'"
     ]
    }
   ],
   "source": [
    "import streamlit as st\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.metrics import mean_squared_error, r2_score\n",
    "\n",
    "# Define the data\n",
    "data = {\n",
    "    'City': ['Mumbai', 'Delhi', 'Bangalore', 'Hyderabad', 'Ahmedabad', 'Chennai', 'Kolkata', 'Pune', 'Jaipur', 'Lucknow'],\n",
    "    'Population': [20411000, 16787941, 8443675, 6809970, 5570585, 4646732, 4486679, 3124458, 3046163, 2817105],\n",
    "    'Area': [603, 1484, 709, 650, 464, 426, 185, 331, 485, 631],\n",
    "    'Urban_Agriculture_Area': [1500, 1800, 1300, 1100, 1000, 1200, 800, 950, 600, 700],\n",
    "    'Food_Security_Index': [75, 70, 72, 68, 65, 73, 60, 69, 64, 62],\n",
    "    'Sustainability_Index': [80, 78, 76, 74, 70, 77, 68, 72, 71, 69]\n",
    "}\n",
    "\n",
    "# Create a DataFrame\n",
    "df = pd.DataFrame(data)\n",
    "\n",
    "# Streamlit App\n",
    "\n",
    "st.title('Urban Agriculture Data Analysis in India')\n",
    "\n",
    "# Sidebar for navigation\n",
    "st.sidebar.title('Navigation')\n",
    "options = st.sidebar.radio('Select an option:', \n",
    "                           ['Show Basic Statistics', \n",
    "                            'Show Correlation Matrix', \n",
    "                            'Show Scatter Plots', \n",
    "                            'Show Box Plots', \n",
    "                            'Run Linear Regression'])\n",
    "\n",
    "# Display basic statistics\n",
    "if options == 'Show Basic Statistics':\n",
    "    st.header('Basic Statistics')\n",
    "    st.write(df.describe())\n",
    "\n",
    "# Display correlation matrix\n",
    "if options == 'Show Correlation Matrix':\n",
    "    st.header('Correlation Matrix')\n",
    "    corr_matrix = df.drop('City', axis=1).corr()\n",
    "    st.write(corr_matrix)\n",
    "    \n",
    "    # Display heatmap\n",
    "    plt.figure(figsize=(10, 8))\n",
    "    sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', linewidths=0.5)\n",
    "    st.pyplot(plt.gcf())\n",
    "    plt.close()  # Close the figure\n",
    "\n",
    "# Display scatter plots\n",
    "if options == 'Show Scatter Plots':\n",
    "    st.header('Scatter Plots')\n",
    "    plt.figure(figsize=(10, 6))\n",
    "    \n",
    "    plt.subplot(1, 2, 1)\n",
    "    sns.scatterplot(x='Urban_Agriculture_Area', y='Food_Security_Index', hue='City', data=df, palette='tab10')\n",
    "    plt.title('Urban Agriculture Area vs Food Security Index')\n",
    "    plt.xlabel('Urban Agriculture Area (hectares)')\n",
    "    plt.ylabel('Food Security Index')\n",
    "    plt.legend(bbox_to_anchor=(1.05, 1), loc='upper left')\n",
    "    \n",
    "    plt.subplot(1, 2, 2)\n",
    "    sns.scatterplot(x='Urban_Agriculture_Area', y='Sustainability_Index', hue='City', data=df, palette='tab10')\n",
    "    plt.title('Urban Agriculture Area vs Sustainability Index')\n",
    "    plt.xlabel('Urban Agriculture Area (hectares)')\n",
    "    plt.ylabel('Sustainability Index')\n",
    "    plt.legend(bbox_to_anchor=(1.05, 1), loc='upper left')\n",
    "    \n",
    "    st.pyplot(plt.gcf())\n",
    "    plt.close()  # Close the figure\n",
    "\n",
    "# Display box plots\n",
    "if options == 'Show Box Plots':\n",
    "    st.header('Box Plots')\n",
    "    plt.figure(figsize=(14, 6))\n",
    "    \n",
    "    plt.subplot(1, 2, 1)\n",
    "    sns.boxplot(x='City', y='Food_Security_Index', data=df)\n",
    "    plt.title('Food Security Index by City')\n",
    "    plt.xticks(rotation=90)\n",
    "    \n",
    "    plt.subplot(1, 2, 2)\n",
    "    sns.boxplot(x='City', y='Sustainability_Index', data=df)\n",
    "    plt.title('Sustainability Index by City')\n",
    "    plt.xticks(rotation=90)\n",
    "    \n",
    "    st.pyplot(plt.gcf())\n",
    "    plt.close()  # Close the figure\n",
    "\n",
    "# Run linear regression\n",
    "if options == 'Run Linear Regression':\n",
    "    st.header('Linear Regression')\n",
    "    \n",
    "    X = df[['Urban_Agriculture_Area']]\n",
    "    y = df['Food_Security_Index']\n",
    "    \n",
    "    # Split the data into training and testing sets\n",
    "    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
    "    \n",
    "    # Create and train the model\n",
    "    model = LinearRegression()\n",
    "    model.fit(X_train, y_train)\n",
    "    \n",
    "    # Make predictions\n",
    "    y_pred = model.predict(X_test)\n",
    "    \n",
    "    # Evaluate the model\n",
    "    mse = mean_squared_error(y_test, y_pred)\n",
    "    r2 = r2_score(y_test, y_pred)\n",
    "    \n",
    "    st.write(f'Mean Squared Error: {mse}')\n",
    "    st.write(f'R^2 Score: {r2}')\n",
    "    \n",
    "    # Plot the regression line\n",
    "    plt.figure(figsize=(10, 6))\n",
    "    plt.scatter(X_test, y_test, color='blue', label='Actual')\n",
    "    plt.plot(X_test, y_pred, color='red', linewidth=2, label='Predicted')\n",
    "    plt.title('Linear Regression: Urban Agriculture Area vs Food Security Index')\n",
    "    plt.xlabel('Urban Agriculture Area (hectares)')\n",
    "    plt.ylabel('Food Security Index')\n",
    "    plt.legend()\n",
    "    st.pyplot(plt.gcf())\n",
    "    plt.close()  # Close the figure\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": None,
   "id": "e60b732e-efa2-43c5-a62e-dead59991193",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
